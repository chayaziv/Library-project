// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(Dblibrary))]
    [Migration("20250721215945_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Books", b =>
                {
                    b.Property<int>("BookCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookCode"), 1L, 1);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerWeek")
                        .HasColumnType("int");

                    b.HasKey("BookCode");

                    b.HasIndex("CategoryId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("DAL.CardRedemption", b =>
                {
                    b.Property<int>("QuestionCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionCode"), 1L, 1);

                    b.Property<DateTime>("DateOfQuestion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageCodePackageCode")
                        .HasColumnType("int");

                    b.Property<int>("PointsDeducted")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("balance")
                        .HasColumnType("int");

                    b.Property<int>("booksBookCode")
                        .HasColumnType("int");

                    b.Property<int>("idPackage")
                        .HasColumnType("int");

                    b.Property<int>("idbooks")
                        .HasColumnType("int");

                    b.HasKey("QuestionCode");

                    b.HasIndex("PackageCodePackageCode");

                    b.HasIndex("booksBookCode");

                    b.ToTable("CardRedemptions");
                });

            modelBuilder.Entity("DAL.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DAL.Package", b =>
                {
                    b.Property<int>("PackageCodePackageCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageCodePackageCode"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointCount")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("PackageCodePackageCode");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("DAL.SubscriptionCard", b =>
                {
                    b.Property<int>("PurchaseCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseCode"), 1L, 1);

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<int>("Subscriptions")
                        .HasColumnType("int");

                    b.HasKey("PurchaseCode");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionCards");
                });

            modelBuilder.Entity("DAL.Subscriptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<int?>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("UserCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("PackageSubscriptionCard", b =>
                {
                    b.Property<int>("PackagesPackageCodePackageCode")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionCardsPurchaseCode")
                        .HasColumnType("int");

                    b.HasKey("PackagesPackageCodePackageCode", "SubscriptionCardsPurchaseCode");

                    b.HasIndex("SubscriptionCardsPurchaseCode");

                    b.ToTable("PackageSubscriptionCard");
                });

            modelBuilder.Entity("DAL.Books", b =>
                {
                    b.HasOne("DAL.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.CardRedemption", b =>
                {
                    b.HasOne("DAL.Package", "Package")
                        .WithMany("CardRedemptions")
                        .HasForeignKey("PackageCodePackageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Books", "books")
                        .WithMany("CardRedemptions")
                        .HasForeignKey("booksBookCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("books");
                });

            modelBuilder.Entity("DAL.SubscriptionCard", b =>
                {
                    b.HasOne("DAL.Subscriptions", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("PackageSubscriptionCard", b =>
                {
                    b.HasOne("DAL.Package", null)
                        .WithMany()
                        .HasForeignKey("PackagesPackageCodePackageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.SubscriptionCard", null)
                        .WithMany()
                        .HasForeignKey("SubscriptionCardsPurchaseCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Books", b =>
                {
                    b.Navigation("CardRedemptions");
                });

            modelBuilder.Entity("DAL.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DAL.Package", b =>
                {
                    b.Navigation("CardRedemptions");
                });
#pragma warning restore 612, 618
        }
    }
}
